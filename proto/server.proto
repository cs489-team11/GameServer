// TODO: change all money-related values to floats (due to dealing with percents) or find workaround.
// TODO: add lottery messages
// TODO: add game (quiz/bidding) messages.
syntax = "proto3";

package server;
option go_package = ".;pb";

message Player {
  fixed64 user_id = 1;
  string username = 2;
  int32 points = 3;
}

message JoinRequest { string username = 1; }

message JoinResponse {
  fixed64 user_id = 1;
  fixed64 game_id = 2;

  // fields related to the game configs
  int32 duration = 3;
  int32 player_points = 4;
  int32 bank_points_per_player = 5;
  int32 credit_interest = 6;
  int32 deposit_interest = 7;

  // players who already joined the game
  repeated Player players = 8;
}

message LeaveRequest {
  fixed64 user_id = 1;
  string game_id = 2;
}

message LeaveResponse {}

message StartRequest {
  fixed64 user_id = 1;
  fixed64 game_id = 2;
}

message StartResponse { bool success = 1; }

message CreditRequest {
  fixed64 user_id = 1;
  fixed64 game_id = 2;
  int32 value = 3;
}

// In case of credit, it cannot be granted
// if the bank doesn't have enough money or
// if the user asks too much. These reasons
// will be stated in "explanation" field if
// "success" is false.
message CreditResponse {
  bool success = 1;
  string explanation = 2;
}

message DepositRequest {
  fixed64 user_id = 1;
  fixed64 game_id = 2;
  int32 value = 3;
}

// In case of deposit, it cannot be granted
// if the user doesn't have enough money or
// the user puts too much. These reasons
// will be stated in "explanation" field if
// "success" is false.
message DepositResponse {
  bool success = 1;
  string explanation = 2;
}

message StreamRequest {
  fixed64 user_id = 1;
  fixed64 game_id = 2;
}

message StreamResponse {
  oneof event {
    // Events for game in "Waiting" state.
    Join join = 1;
    Leave leave = 2;
    // Events for game in "Active" state.
    Start start = 3;
    Transaction transaction = 4;
  }

  message Join { Player player = 1; }

  message Leave { fixed64 user_id = 1; }

  // It might have contained time so that client
  // can precisely estimate the remaining time.
  // However, we will ignore it for now.
  message Start {}

  message Transaction {
    // Server will recalculate the amount
    // of money for each player and send it
    // to client. This way, client won't have
    // to do calculations. It can just update
    // the fields showing amounts of "points"
    // for each player.
    repeated Player players = 1;

    oneof event {
      UseCredit use_credit = 2;
      UseDeposit use_deposit = 3;
      ReturnCredit return_credit = 4;
      ReturnDeposit return_deposit = 5;
      Theft theft = 6;
    }

    message UseCredit {
      fixed64 user_id = 1;
      int32 value = 2;
    }

    message UseDeposit {
      fixed64 user_id = 1;
      int32 value = 2;
    }

    message ReturnCredit {
      fixed64 user_id = 1;
      int32 value = 2;
    }

    message ReturnDeposit {
      fixed64 user_id = 1;
      int32 value = 2;
    }

    message Theft {
      repeated RobbedPlayer robbed_players = 1;

      message RobbedPlayer {
        fixed64 user_id = 1;
        // value shows how much money has been stolen from the player.
        int32 value = 2;
      }
    }
  }
}

// The service will not use global UTC time.
// It will just order requests based on the order
// of arrival to the server.
// The requirement to the service is to maintain
// the invariant that total amount of money is
// unchangeable.
service Game {
  // To join, user needs to provide username to be displayed.
  // If all games are full or finished, we will
  // create a new one.
  // Unique user_id will be generated for using within a game
  // and returned.
  // We will also return the initial game configs such as
  // game duration, amount of points, etc.
  // NOTE: players can only join or leave the "Waiting" game.
  // For "Active" game, new users cannot join and existing
  // users cannot leave.
  rpc Join(JoinRequest) returns(JoinResponse) {}
  rpc Leave(LeaveRequest) returns(LeaveResponse) {}

  // One of the users will start the game. We cannot automatically
  // start the game, since it is not some popular project with
  // a constant flow of users - there may not be enough users in
  // a game.
  rpc Start(StartRequest) returns(StartResponse) {}

  rpc Credit(CreditRequest) returns(CreditResponse) {}

  rpc Deposit(DepositRequest) returns(DepositResponse) {}

  // Other RPCs related to the game scenario will be similar to
  // the Credit and Deposit RPCs.

  rpc Stream(StreamRequest) returns(stream StreamResponse) {}
}